package com.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.localsqldemo.entity.BankCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_CARD".
*/
public class BankCardDao extends AbstractDao<BankCard, Long> {

    public static final String TABLENAME = "BANK_CARD";

    /**
     * Properties of entity BankCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property CardNum = new Property(1, String.class, "cardNum", false, "CARD_NUM");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property BankId = new Property(3, Long.class, "bankId", false, "BANK_ID");
    }

    private Query<BankCard> person_BankCardsQuery;

    public BankCardDao(DaoConfig config) {
        super(config);
    }
    
    public BankCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"CARD_NUM\" TEXT," + // 1: cardNum
                "\"NAME\" TEXT," + // 2: name
                "\"BANK_ID\" INTEGER);"); // 3: bankId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankCard entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(2, cardNum);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Long bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindLong(4, bankId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankCard entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(2, cardNum);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Long bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindLong(4, bankId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BankCard readEntity(Cursor cursor, int offset) {
        BankCard entity = new BankCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // bankId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bankCards" to-many relationship of Person. */
    public List<BankCard> _queryPerson_BankCards(Long bankId) {
        synchronized (this) {
            if (person_BankCardsQuery == null) {
                QueryBuilder<BankCard> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BankId.eq(null));
                person_BankCardsQuery = queryBuilder.build();
            }
        }
        Query<BankCard> query = person_BankCardsQuery.forCurrentThread();
        query.setParameter(0, bankId);
        return query.list();
    }

}
