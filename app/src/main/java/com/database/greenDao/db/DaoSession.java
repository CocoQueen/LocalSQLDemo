package com.database.greenDao.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.example.localsqldemo.entity.IdCard;
import com.example.localsqldemo.entity.Student;
import com.example.localsqldemo.entity.Father;
import com.example.localsqldemo.entity.Son;
import com.example.localsqldemo.entity.BankCard;
import com.example.localsqldemo.entity.Person;

import com.database.greenDao.db.IdCardDao;
import com.database.greenDao.db.StudentDao;
import com.database.greenDao.db.FatherDao;
import com.database.greenDao.db.SonDao;
import com.database.greenDao.db.BankCardDao;
import com.database.greenDao.db.PersonDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig idCardDaoConfig;
    private final DaoConfig studentDaoConfig;
    private final DaoConfig fatherDaoConfig;
    private final DaoConfig sonDaoConfig;
    private final DaoConfig bankCardDaoConfig;
    private final DaoConfig personDaoConfig;

    private final IdCardDao idCardDao;
    private final StudentDao studentDao;
    private final FatherDao fatherDao;
    private final SonDao sonDao;
    private final BankCardDao bankCardDao;
    private final PersonDao personDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        idCardDaoConfig = daoConfigMap.get(IdCardDao.class).clone();
        idCardDaoConfig.initIdentityScope(type);

        studentDaoConfig = daoConfigMap.get(StudentDao.class).clone();
        studentDaoConfig.initIdentityScope(type);

        fatherDaoConfig = daoConfigMap.get(FatherDao.class).clone();
        fatherDaoConfig.initIdentityScope(type);

        sonDaoConfig = daoConfigMap.get(SonDao.class).clone();
        sonDaoConfig.initIdentityScope(type);

        bankCardDaoConfig = daoConfigMap.get(BankCardDao.class).clone();
        bankCardDaoConfig.initIdentityScope(type);

        personDaoConfig = daoConfigMap.get(PersonDao.class).clone();
        personDaoConfig.initIdentityScope(type);

        idCardDao = new IdCardDao(idCardDaoConfig, this);
        studentDao = new StudentDao(studentDaoConfig, this);
        fatherDao = new FatherDao(fatherDaoConfig, this);
        sonDao = new SonDao(sonDaoConfig, this);
        bankCardDao = new BankCardDao(bankCardDaoConfig, this);
        personDao = new PersonDao(personDaoConfig, this);

        registerDao(IdCard.class, idCardDao);
        registerDao(Student.class, studentDao);
        registerDao(Father.class, fatherDao);
        registerDao(Son.class, sonDao);
        registerDao(BankCard.class, bankCardDao);
        registerDao(Person.class, personDao);
    }
    
    public void clear() {
        idCardDaoConfig.clearIdentityScope();
        studentDaoConfig.clearIdentityScope();
        fatherDaoConfig.clearIdentityScope();
        sonDaoConfig.clearIdentityScope();
        bankCardDaoConfig.clearIdentityScope();
        personDaoConfig.clearIdentityScope();
    }

    public IdCardDao getIdCardDao() {
        return idCardDao;
    }

    public StudentDao getStudentDao() {
        return studentDao;
    }

    public FatherDao getFatherDao() {
        return fatherDao;
    }

    public SonDao getSonDao() {
        return sonDao;
    }

    public BankCardDao getBankCardDao() {
        return bankCardDao;
    }

    public PersonDao getPersonDao() {
        return personDao;
    }

}
